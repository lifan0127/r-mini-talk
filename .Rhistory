topMovieGenre %>%
group_by(Rank) %>%
filter(n() > 2) %>%
do(as.data.frame(t(combn(.$Genre, 3)), stringsAsFactors = FALSE)) %>%
ungroup() %>%
transmute(One = V1, Two = V2, Three = V3) %>%
group_by(One, Two, Three) %>%
summarize(Count = n()) %>%
ungroup(),
by = c("One", "Two", "Three")
) %>%
mutate(Count = ifelse(is.na(Count), 0, Count))
topGenreTriplet <- lapply(1:nrow(topGenreTripletDF), function(i){
list(sets = list(as.integer(genreDict[topGenreTripletDF$One[i]]),
as.integer(genreDict[topGenreTripletDF$Two[i]]),
as.integer(genreDict[topGenreTripletDF$Three[i]])),
size = topGenreTripletDF$Count[i])
})
topGenreAll <- c(topGenre, topGenrePair, topGenreTriplet)
library(d3vennR)
d3vennR(
data = topGenreAll, width = 420, height = 420
)
topMovieGenre <- movieGenre %>%
filter(Genre %in% names(sort(table(movieGenre$Genre), decreasing = TRUE))[1:10])
genre <- sort(unique(topMovieGenre$Genre))
genreDict <- structure(0:(length(genre)-1), names = genre)
genreTable <- table(topMovieGenre$Genre)
topGenre <- lapply(1:length(genre), function(i){
list(sets = list(i-1), label = genre[i], size = as.integer(genreTable[i]))
})
topGenrePairDF <- structure(
as.data.frame(t(combn(genre, 2)), stringsAsFactors = FALSE),
names = c("One", "Two")
) %>%
left_join(
topMovieGenre %>%
group_by(Rank) %>%
filter(n() > 1) %>%
do(as.data.frame(t(combn(.$Genre, 2)), stringsAsFactors = FALSE)) %>%
ungroup() %>%
transmute(One = V1, Two = V2) %>%
group_by(One, Two) %>%
summarize(Count = n()) %>%
ungroup(),
by = c("One", "Two")
) %>%
mutate(Count = ifelse(is.na(Count), 0, Count))
topGenrePair <- lapply(1:nrow(topGenrePairDF), function(i){
list(sets = list(as.integer(genreDict[topGenrePairDF$One[i]]),
as.integer(genreDict[topGenrePairDF$Two[i]])),
size = topGenrePairDF$Count[i])
})
topGenreTripletDF <- structure(
as.data.frame(t(combn(genre, 3)), stringsAsFactors = FALSE),
names = c("One", "Two", "Three")
) %>%
left_join(
topMovieGenre %>%
group_by(Rank) %>%
filter(n() > 2) %>%
do(as.data.frame(t(combn(.$Genre, 3)), stringsAsFactors = FALSE)) %>%
ungroup() %>%
transmute(One = V1, Two = V2, Three = V3) %>%
group_by(One, Two, Three) %>%
summarize(Count = n()) %>%
ungroup(),
by = c("One", "Two", "Three")
) %>%
mutate(Count = ifelse(is.na(Count), 0, Count))
topGenreTriplet <- lapply(1:nrow(topGenreTripletDF), function(i){
list(sets = list(as.integer(genreDict[topGenreTripletDF$One[i]]),
as.integer(genreDict[topGenreTripletDF$Two[i]]),
as.integer(genreDict[topGenreTripletDF$Three[i]])),
size = topGenreTripletDF$Count[i])
})
topGenreAll <- c(topGenre, topGenrePair, topGenreTriplet)
library(d3vennR)
d3vennR(
data = topGenreAll
)
topMovieGenre <- movieGenre %>%
filter(Genre %in% names(sort(table(movieGenre$Genre), decreasing = TRUE))[2:10])
genre <- sort(unique(topMovieGenre$Genre))
genreDict <- structure(0:(length(genre)-1), names = genre)
genreTable <- table(topMovieGenre$Genre)
topGenre <- lapply(1:length(genre), function(i){
list(sets = list(i-1), label = genre[i], size = as.integer(genreTable[i]))
})
topGenrePairDF <- structure(
as.data.frame(t(combn(genre, 2)), stringsAsFactors = FALSE),
names = c("One", "Two")
) %>%
left_join(
topMovieGenre %>%
group_by(Rank) %>%
filter(n() > 1) %>%
do(as.data.frame(t(combn(.$Genre, 2)), stringsAsFactors = FALSE)) %>%
ungroup() %>%
transmute(One = V1, Two = V2) %>%
group_by(One, Two) %>%
summarize(Count = n()) %>%
ungroup(),
by = c("One", "Two")
) %>%
mutate(Count = ifelse(is.na(Count), 0, Count))
topGenrePair <- lapply(1:nrow(topGenrePairDF), function(i){
list(sets = list(as.integer(genreDict[topGenrePairDF$One[i]]),
as.integer(genreDict[topGenrePairDF$Two[i]])),
size = topGenrePairDF$Count[i])
})
topGenreTripletDF <- structure(
as.data.frame(t(combn(genre, 3)), stringsAsFactors = FALSE),
names = c("One", "Two", "Three")
) %>%
left_join(
topMovieGenre %>%
group_by(Rank) %>%
filter(n() > 2) %>%
do(as.data.frame(t(combn(.$Genre, 3)), stringsAsFactors = FALSE)) %>%
ungroup() %>%
transmute(One = V1, Two = V2, Three = V3) %>%
group_by(One, Two, Three) %>%
summarize(Count = n()) %>%
ungroup(),
by = c("One", "Two", "Three")
) %>%
mutate(Count = ifelse(is.na(Count), 0, Count))
topGenreTriplet <- lapply(1:nrow(topGenreTripletDF), function(i){
list(sets = list(as.integer(genreDict[topGenreTripletDF$One[i]]),
as.integer(genreDict[topGenreTripletDF$Two[i]]),
as.integer(genreDict[topGenreTripletDF$Three[i]])),
size = topGenreTripletDF$Count[i])
})
topGenreAll <- c(topGenre, topGenrePair, topGenreTriplet)
library(d3vennR)
d3vennR(
data = topGenreAll
)
topMovieGenre <- movieGenre %>%
filter(Genre %in% names(sort(table(movieGenre$Genre), decreasing = TRUE))[1:5])
genre <- sort(unique(topMovieGenre$Genre))
genreDict <- structure(0:(length(genre)-1), names = genre)
genreTable <- table(topMovieGenre$Genre)
topGenre <- lapply(1:length(genre), function(i){
list(sets = list(i-1), label = genre[i], size = as.integer(genreTable[i]))
})
topGenrePairDF <- structure(
as.data.frame(t(combn(genre, 2)), stringsAsFactors = FALSE),
names = c("One", "Two")
) %>%
left_join(
topMovieGenre %>%
group_by(Rank) %>%
filter(n() > 1) %>%
do(as.data.frame(t(combn(.$Genre, 2)), stringsAsFactors = FALSE)) %>%
ungroup() %>%
transmute(One = V1, Two = V2) %>%
group_by(One, Two) %>%
summarize(Count = n()) %>%
ungroup(),
by = c("One", "Two")
) %>%
mutate(Count = ifelse(is.na(Count), 0, Count))
topGenrePair <- lapply(1:nrow(topGenrePairDF), function(i){
list(sets = list(as.integer(genreDict[topGenrePairDF$One[i]]),
as.integer(genreDict[topGenrePairDF$Two[i]])),
size = topGenrePairDF$Count[i])
})
topGenreTripletDF <- structure(
as.data.frame(t(combn(genre, 3)), stringsAsFactors = FALSE),
names = c("One", "Two", "Three")
) %>%
left_join(
topMovieGenre %>%
group_by(Rank) %>%
filter(n() > 2) %>%
do(as.data.frame(t(combn(.$Genre, 3)), stringsAsFactors = FALSE)) %>%
ungroup() %>%
transmute(One = V1, Two = V2, Three = V3) %>%
group_by(One, Two, Three) %>%
summarize(Count = n()) %>%
ungroup(),
by = c("One", "Two", "Three")
) %>%
mutate(Count = ifelse(is.na(Count), 0, Count))
topGenreTriplet <- lapply(1:nrow(topGenreTripletDF), function(i){
list(sets = list(as.integer(genreDict[topGenreTripletDF$One[i]]),
as.integer(genreDict[topGenreTripletDF$Two[i]]),
as.integer(genreDict[topGenreTripletDF$Three[i]])),
size = topGenreTripletDF$Count[i])
})
topGenreAll <- c(topGenre, topGenrePair, topGenreTriplet)
library(d3vennR)
d3vennR(
data = topGenreAll
)
topGenrePairDF
topMovieGenre <- movieGenre %>%
filter(Genre %in% names(sort(table(movieGenre$Genre), decreasing = TRUE))[6:10])
genre <- sort(unique(topMovieGenre$Genre))
genreDict <- structure(0:(length(genre)-1), names = genre)
genreTable <- table(topMovieGenre$Genre)
topGenre <- lapply(1:length(genre), function(i){
list(sets = list(i-1), label = genre[i], size = as.integer(genreTable[i]))
})
topGenrePairDF <- structure(
as.data.frame(t(combn(genre, 2)), stringsAsFactors = FALSE),
names = c("One", "Two")
) %>%
left_join(
topMovieGenre %>%
group_by(Rank) %>%
filter(n() > 1) %>%
do(as.data.frame(t(combn(.$Genre, 2)), stringsAsFactors = FALSE)) %>%
ungroup() %>%
transmute(One = V1, Two = V2) %>%
group_by(One, Two) %>%
summarize(Count = n()) %>%
ungroup(),
by = c("One", "Two")
) %>%
mutate(Count = ifelse(is.na(Count), 0, Count))
topGenrePair <- lapply(1:nrow(topGenrePairDF), function(i){
list(sets = list(as.integer(genreDict[topGenrePairDF$One[i]]),
as.integer(genreDict[topGenrePairDF$Two[i]])),
size = topGenrePairDF$Count[i])
})
topGenreTripletDF <- structure(
as.data.frame(t(combn(genre, 3)), stringsAsFactors = FALSE),
names = c("One", "Two", "Three")
) %>%
left_join(
topMovieGenre %>%
group_by(Rank) %>%
filter(n() > 2) %>%
do(as.data.frame(t(combn(.$Genre, 3)), stringsAsFactors = FALSE)) %>%
ungroup() %>%
transmute(One = V1, Two = V2, Three = V3) %>%
group_by(One, Two, Three) %>%
summarize(Count = n()) %>%
ungroup(),
by = c("One", "Two", "Three")
) %>%
mutate(Count = ifelse(is.na(Count), 0, Count))
topGenreTriplet <- lapply(1:nrow(topGenreTripletDF), function(i){
list(sets = list(as.integer(genreDict[topGenreTripletDF$One[i]]),
as.integer(genreDict[topGenreTripletDF$Two[i]]),
as.integer(genreDict[topGenreTripletDF$Three[i]])),
size = topGenreTripletDF$Count[i])
})
topGenreAll <- c(topGenre, topGenrePair, topGenreTriplet)
library(d3vennR)
d3vennR(
data = topGenreAll
)
movieGenre <- movies %>%
select(Rank, Genre) %>%
rowwise() %>%
do(data_frame(Rank = .$Rank, Genre = stri_split_fixed(.$Genre, ", ")[[1]])) %>%
ungroup()
topMovieGenre <- movieGenre %>%
filter(Genre %in% names(sort(table(movieGenre$Genre), decreasing = TRUE))[6:10])
genre <- sort(unique(topMovieGenre$Genre))
genreDict <- structure(0:(length(genre)-1), names = genre)
genreTable <- table(topMovieGenre$Genre)
topGenre <- lapply(1:length(genre), function(i){
list(sets = list(i-1), label = genre[i], size = as.integer(genreTable[i]))
})
topGenrePairDF <- structure(
as.data.frame(t(combn(genre, 2)), stringsAsFactors = FALSE),
names = c("One", "Two")
) %>%
left_join(
topMovieGenre %>%
group_by(Rank) %>%
filter(n() > 1) %>%
do(as.data.frame(t(combn(.$Genre, 2)), stringsAsFactors = FALSE)) %>%
ungroup() %>%
transmute(One = V1, Two = V2) %>%
group_by(One, Two) %>%
summarize(Count = n()) %>%
ungroup(),
by = c("One", "Two")
) %>%
mutate(Count = ifelse(is.na(Count), 0, Count))
topGenrePair <- lapply(1:nrow(topGenrePairDF), function(i){
list(sets = list(as.integer(genreDict[topGenrePairDF$One[i]]),
as.integer(genreDict[topGenrePairDF$Two[i]])),
size = topGenrePairDF$Count[i])
})
d3vennR(data = c(topGenre, topGenrePair))
sort(table(movieGenre$Genre), decreasing = TRUE)
topMovieGenre <- movieGenre %>%
filter(Genre %in% names(sort(table(movieGenre$Genre), decreasing = TRUE))[1:10])
genre <- sort(unique(topMovieGenre$Genre))
genreDict <- structure(0:(length(genre)-1), names = genre)
genreTable <- table(topMovieGenre$Genre)
topGenre <- lapply(1:length(genre), function(i){
list(sets = list(i-1), label = genre[i], size = as.integer(genreTable[i]))
})
topGenrePairDF <- structure(
as.data.frame(t(combn(genre, 2)), stringsAsFactors = FALSE),
names = c("One", "Two")
) %>%
left_join(
topMovieGenre %>%
group_by(Rank) %>%
filter(n() > 1) %>%
do(as.data.frame(t(combn(.$Genre, 2)), stringsAsFactors = FALSE)) %>%
ungroup() %>%
transmute(One = V1, Two = V2) %>%
group_by(One, Two) %>%
summarize(Count = n()) %>%
ungroup(),
by = c("One", "Two")
) %>%
mutate(Count = ifelse(is.na(Count), 0, Count))
topGenrePair <- lapply(1:nrow(topGenrePairDF), function(i){
list(sets = list(as.integer(genreDict[topGenrePairDF$One[i]]),
as.integer(genreDict[topGenrePairDF$Two[i]])),
size = topGenrePairDF$Count[i])
})
topGenreTripletDF <- structure(
as.data.frame(t(combn(genre, 3)), stringsAsFactors = FALSE),
names = c("One", "Two", "Three")
) %>%
left_join(
topMovieGenre %>%
group_by(Rank) %>%
filter(n() > 2) %>%
do(as.data.frame(t(combn(.$Genre, 3)), stringsAsFactors = FALSE)) %>%
ungroup() %>%
transmute(One = V1, Two = V2, Three = V3) %>%
group_by(One, Two, Three) %>%
summarize(Count = n()) %>%
ungroup(),
by = c("One", "Two", "Three")
) %>%
mutate(Count = ifelse(is.na(Count), 0, Count))
topGenreTriplet <- lapply(1:nrow(topGenreTripletDF), function(i){
list(sets = list(as.integer(genreDict[topGenreTripletDF$One[i]]),
as.integer(genreDict[topGenreTripletDF$Two[i]]),
as.integer(genreDict[topGenreTripletDF$Three[i]])),
size = topGenreTripletDF$Count[i])
})
topGenreAll <- c(topGenre, topGenrePair, topGenreTriplet)
library(d3vennR)
d3vennR(
data = topGenreAll
)
sort(table(movieGenre$Genre), decreasing = TRUE)
filter(Genre %in% names(sort(table(movieGenre$Genre), decreasing = TRUE))[c(2, 3, 4, 6, 8, 10, 11, 13)])
topMovieGenre <- movieGenre %>%
filter(Genre %in% names(sort(table(movieGenre$Genre), decreasing = TRUE))[c(2, 3, 4, 6, 8, 10, 11, 13)])
genre <- sort(unique(topMovieGenre$Genre))
genreDict <- structure(0:(length(genre)-1), names = genre)
genreTable <- table(topMovieGenre$Genre)
topGenre <- lapply(1:length(genre), function(i){
list(sets = list(i-1), label = genre[i], size = as.integer(genreTable[i]))
})
topGenrePairDF <- structure(
as.data.frame(t(combn(genre, 2)), stringsAsFactors = FALSE),
names = c("One", "Two")
) %>%
left_join(
topMovieGenre %>%
group_by(Rank) %>%
filter(n() > 1) %>%
do(as.data.frame(t(combn(.$Genre, 2)), stringsAsFactors = FALSE)) %>%
ungroup() %>%
transmute(One = V1, Two = V2) %>%
group_by(One, Two) %>%
summarize(Count = n()) %>%
ungroup(),
by = c("One", "Two")
) %>%
mutate(Count = ifelse(is.na(Count), 0, Count))
topGenrePair <- lapply(1:nrow(topGenrePairDF), function(i){
list(sets = list(as.integer(genreDict[topGenrePairDF$One[i]]),
as.integer(genreDict[topGenrePairDF$Two[i]])),
size = topGenrePairDF$Count[i])
})
topGenreTripletDF <- structure(
as.data.frame(t(combn(genre, 3)), stringsAsFactors = FALSE),
names = c("One", "Two", "Three")
) %>%
left_join(
topMovieGenre %>%
group_by(Rank) %>%
filter(n() > 2) %>%
do(as.data.frame(t(combn(.$Genre, 3)), stringsAsFactors = FALSE)) %>%
ungroup() %>%
transmute(One = V1, Two = V2, Three = V3) %>%
group_by(One, Two, Three) %>%
summarize(Count = n()) %>%
ungroup(),
by = c("One", "Two", "Three")
) %>%
mutate(Count = ifelse(is.na(Count), 0, Count))
topGenreTriplet <- lapply(1:nrow(topGenreTripletDF), function(i){
list(sets = list(as.integer(genreDict[topGenreTripletDF$One[i]]),
as.integer(genreDict[topGenreTripletDF$Two[i]]),
as.integer(genreDict[topGenreTripletDF$Three[i]])),
size = topGenreTripletDF$Count[i])
})
topGenreAll <- c(topGenre, topGenrePair, topGenreTriplet)
library(d3vennR)
d3vennR(
data = topGenreAll
)
d3vennR(
data = topGenreAll, fontSize = "1.2em"
)
shiny::runApp()
shiny::runApp()
filter(Genre %in% names(sort(table(movieGenre$Genre), decreasing = TRUE))[c(2, 3, 6, 8, 10, 11, 13, 16, 18)])
shiny::runApp()
vennData <- toVenn(movies)
movies <- read_csv("data/movies250.csv")
source("R/to-venn.R")
vennData <- toVenn(movies)
d3vennR(
data = vennData, height = 420, fontSize = "1.2em"
)
shiny::runApp()
shiny::runApp()
shiny::runApp()
d3vennR(
data = vennData, height = 460, width = 460, fontSize = "1.2em"
)
shiny::runApp()
movies <- read_csv("data/movies250.csv")
d3vennR(vennData)
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
topMovieGenre <- movieGenre %>%
filter(Genre %in% names(sort(table(movieGenre$Genre), decreasing = TRUE))[c(2, 3, 6, 8, 10, 11, 13, 16, 18)])
movieGenre <- movies %>%
select(Rank, Genre) %>%
rowwise() %>%
do(data_frame(Rank = .$Rank, Genre = stri_split_fixed(.$Genre, ", ")[[1]])) %>%
ungroup()
topMovieGenre <- movieGenre %>%
filter(Genre %in% names(sort(table(movieGenre$Genre), decreasing = TRUE))[c(2, 3, 6, 8, 10, 11, 13, 16, 18)])
genre <- sort(unique(topMovieGenre$Genre))
genre
shiny::runApp()
head(moviews)
head(movies)
selectedMovies <- movies[1:5, ]
paste0("<ul>",
paste0("<li>", selectedMovies$Title, " (", selectedMovies$Year, ")</li>"),
"</ul>",
collapse = ""
)
paste0("<li>", selectedMovies$Title, " (", selectedMovies$Year, ")</li>")
paste0("<ul>",
paste0("<li>",
selectedMovies$Title, " (", selectedMovies$Year,
")</li>",
collapse = ""),
"</ul>"
)
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
topMovieGenre
topMovieGenre %>% filter(Genre == "animation")
?renderTable
topMovieGenre
genre
genreDict
genreDict <- structure(0:(length(genre)-1), names = genre)
genreDict
genreTable <- table(topMovieGenre$Genre)
genreTable
shiny::runApp()
View(topMovieGenre)
shiny::runApp()
topMovieGenre %>%
group_by(Rank) %>%
filter(all(selectedGenre %in% Genre))
selectedGenre <- c("comedy", "war")
topMovieGenre %>%
group_by(Rank) %>%
filter(all(selectedGenre %in% Genre))
shiny::runApp()
names(sort(table(movieGenre$Genre), decreasing = TRUE))
shiny::runApp()
shiny::runApp()
movieGenre %>% group_by(Rank) %>% filter(n() == 3)
a <- movieGenre %>% group_by(Rank) %>% filter(n() == 3)
table(a$Genre)
names(sort(table(movieGenre$Genre), decreasing = TRUE))
shiny::runApp()
shiny::runApp()
shiny::runApp()
